name: Release Build

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Add specific node versions if needed, defaults to a recent LTS
        # node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm dist --publish never
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Build Output Info (Linux)
        if: matrix.os == 'ubuntu-latest'
        id: linux_info
        run: |
          echo "--- Searching for artifact in dist directory ---"
          ls -lR dist # List contents of dist recursively for debugging
          echo "--- Running find command ---"
          # Use -print -quit; store output, print it, check if empty
          FOUND_PATH=$(find dist -name 'OpenFront Buddy*.AppImage' -type f -print -quit)
          echo "Raw output from find command: '${FOUND_PATH}'"
          if [[ -z "$FOUND_PATH" ]]; then
            echo "::error::AppImage artifact file not found using find command!"
            find dist -type f -exec echo "Found file: {}" \; # Print all files found in dist
            exit 1
          fi
          ARTIFACT_PATH="$FOUND_PATH" # Assign the found path
          ARTIFACT_NAME=$(basename "$ARTIFACT_PATH")
          echo "Determined Artifact Path: ${ARTIFACT_PATH}"
          echo "Determined Artifact Name: ${ARTIFACT_NAME}"
          echo "Setting output: artifact_path=${ARTIFACT_PATH}"
          echo "artifact_path=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT
          echo "Setting output: artifact_name=${ARTIFACT_NAME}"
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "--- Outputs set ---"

      - name: Get Build Output Info (macOS)
        if: matrix.os == 'macos-latest'
        id: macos_info
        run: |
          ARTIFACT_PATH=$(find dist -name 'OpenFront Buddy*.dmg' -type f | head -n 1)
          ARTIFACT_NAME=$(basename "$ARTIFACT_PATH")
          echo "artifact_path=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Get Build Output Info (Windows)
        if: matrix.os == 'windows-latest'
        id: windows_info
        shell: pwsh # Use PowerShell on Windows runner
        run: |
          $ARTIFACT_PATH = Get-ChildItem -Path dist -Filter 'OpenFront Buddy*.exe' -Recurse | Select-Object -First 1 -ExpandProperty FullName
          $ARTIFACT_NAME = Split-Path -Path $ARTIFACT_PATH -Leaf
          echo "artifact_path=${ARTIFACT_PATH}" >> $env:GITHUB_OUTPUT
          echo "artifact_name=${ARTIFACT_NAME}" >> $env:GITHUB_OUTPUT

      - name: Upload Artifact (${{ matrix.os }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps[format('{0}_info', matrix.os)].outputs.artifact_name }}
          path: ${{ steps[format('{0}_info', matrix.os)].outputs.artifact_path }}
          if-no-files-found: error # Fail if artifact not found

  release:
    name: Create GitHub Release
    needs: build # Run after all build jobs succeed
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # Download all artifacts to this directory

      - name: List downloaded artifacts (for debugging)
        run: ls -R artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # This pulls the tag name (e.g., v1.0.0) to use as the release name
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          # body: | # Optional: Add custom release notes
          #   See CHANGELOG.md for details.
          draft: false # Set to true to create a draft release first
          prerelease: false # Set to true if it's a pre-release
          files: |
            artifacts/**/*.AppImage
            artifacts/**/*.dmg
            artifacts/**/*.exe
            # Add other file types if needed (e.g., .deb, .zip, .blockmap)
            artifacts/**/*.blockmap
