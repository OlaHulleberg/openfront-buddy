name: Release Build

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # Add specific node versions if needed, defaults to a recent LTS
        # node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm dist --publish never
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Build Output Info (Linux)
        if: matrix.os == 'ubuntu-latest'
        id: linux_info
        run: |
          ARTIFACT_PATH=$(find dist -name 'OpenFront Buddy*.AppImage' -type f -print -quit)
          ARTIFACT_NAME=$(basename "$ARTIFACT_PATH")
          echo "artifact_path=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Get Build Output Info (Windows)
        if: matrix.os == 'windows-latest'
        id: windows_info
        shell: pwsh # Use PowerShell on Windows runner
        run: |
          $ARTIFACT_PATH = Get-ChildItem -Path dist -Filter 'OpenFront Buddy*.exe' -Recurse | Select-Object -First 1 -ExpandProperty FullName
          $ARTIFACT_NAME = Split-Path -Path $ARTIFACT_PATH -Leaf
          echo "artifact_path=${ARTIFACT_PATH}" >> $env:GITHUB_OUTPUT
          echo "artifact_name=${ARTIFACT_NAME}" >> $env:GITHUB_OUTPUT

      - name: Upload Artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.linux_info.outputs.artifact_name }}
          path: ${{ steps.linux_info.outputs.artifact_path }}
          if-no-files-found: error

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.windows_info.outputs.artifact_name }}
          path: ${{ steps.windows_info.outputs.artifact_path }}
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build # Run after all build jobs succeed
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # Download all artifacts to this directory

      - name: List downloaded artifacts (for debugging)
        run: ls -R artifacts/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # This pulls the tag name (e.g., v1.0.0) to use as the release name
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          # body: | # Optional: Add custom release notes
          #   See CHANGELOG.md for details.
          draft: false # Set to true to create a draft release first
          prerelease: false # Set to true if it's a pre-release
          files: |
            artifacts/**/*.AppImage
            artifacts/**/*.exe
            # Add other file types if needed (e.g., .deb, .zip, .blockmap)
            artifacts/**/*.blockmap
